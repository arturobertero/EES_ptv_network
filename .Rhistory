#packages
library("pacman")
p_load(tidyverse, here, sjlabelled, stringr, glue, janitor, haven, stargazer,
ltm, skimr, readxl, naniar, labelled, conflicted, countrycode)
#remove scientific notation
options(scipen=999)
#conflicts
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
#EES data
#Combined data from 1989 to 2004
d_1989_2004 = read_dta(here("Input", "data", "trendEES.dta")) %>%
clean_names()
#Original data 2009
d_2009 = read_dta(here("Input", "data", "2009.dta")) %>%
clean_names()
##ptvs
#table(d_2009$q39_p1) #first
#table(d_2009$q39_p15) #last
#Original data 2014
d_2014 = read_dta(here("Input", "data", "2014.dta")) %>%
clean_names()
##ptvs
#table(d_2014$qpp8_1) #first
#table(d_2014$qpp8_8) #last
#Original data 2019
d_2019 = read_dta(here("Input", "data", "2019.dta")) %>%
clean_names()
##ptvs
#table(d_2019$q10_1) #first
#table(d_2019$q10_10) #last
names(d_1989)
names(d_1989_2004)
View(d_1989_2004)
prova = d_1989_2004 %>%
filter(t_cntry == "BELGIUM")
View(prova)
table(prova$t_var007)
table(prova$t_ees)
table(prova$t_var001)
table(prova$t_ees)
table(prova$t_var007)
table(prova$t_ees)
prova = d_1989_2004 %>%
filter(t_cntry == "BELGIUM",
t_ees == "1989")
View(prova)
prova = d_1989_2004 %>%
filter(t_cntry == "BELGIUM",
t_ees == "2004")
map(table, prova)
map(prova, table)
names(prova)
prova = d_1989_2004 %>%
filter(t_cntry == "BELGIUM",
t_ees == "2004") %>%
select(t_var007,t_var_ptv_party1:t_var_ptv_party58)
map(prova, table)
prova = d_1989_2004 %>%
filter(t_cntry == "BELGIUM",
t_ees == "1989") %>%
select(t_var007,t_var_ptv_party1:t_var_ptv_party58)
map(prova, table)
prova = d_1989_2004 %>%
filter(t_cntry == "BELGIUM",
t_ees == "1994") %>%
select(t_var007,t_var_ptv_party1:t_var_ptv_party58)
map(prova, table)
#packages
library("pacman")
p_load(tidyverse, here, sjlabelled, stringr, glue, janitor, haven, stargazer,
ltm, skimr, readxl, naniar, labelled, conflicted, countrycode)
#remove scientific notation
options(scipen=999)
#conflicts
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
#EES data
#Combined data from 1989 to 2004
d_1989_2004 = read_dta(here("Input", "data", "trendEES.dta")) %>%
clean_names()
#Original data 2009
d_2009 = read_dta(here("Input", "data", "2009.dta")) %>%
clean_names()
##ptvs
#table(d_2009$q39_p1) #first
#table(d_2009$q39_p15) #last
#Original data 2014
d_2014 = read_dta(here("Input", "data", "2014.dta")) %>%
clean_names()
##ptvs
#table(d_2014$qpp8_1) #first
#table(d_2014$qpp8_8) #last
#Original data 2019
d_2019 = read_dta(here("Input", "data", "2019.dta")) %>%
clean_names()
##ptvs
#table(d_2019$q10_1) #first
#table(d_2019$q10_10) #last
#Extra operations on cumulated data 1989-2004
#select country, year, ptvs
d_1989_2004 = d_1989_2004 %>%
select(t_ees, t_cntry, t_var001, t_var_ptv_party1: t_var_ptv_party58)
#Missing cases as NA
d_1989_2004 <- d_1989_2004 %>%
mutate(across(t_var_ptv_party1:t_var_ptv_party58, ~case_when(
. == 99 ~ NA_real_,
. == 98 ~ NA_real_,
. == 97 ~ NA_real_,
. == 12 ~ NA_real_,
. == -1 ~ NA_real_,
TRUE ~ .
)))
#wave dfs for d_1989_2004
list_of_dfs <- split(d_1989_2004, d_1989_2004$t_ees)
for (year in names(list_of_dfs)) {
var_name <- paste("df", year, sep = "_")
assign(var_name, list_of_dfs[[year]], envir = .GlobalEnv)
}
#split the dataframe into a list of dataframes based on unique values of t_cntry
list_1989 <- split(df_1989, df_1989$t_var001)
# remove columns with only NA values
list_1989 <- lapply(list_1989, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(t_ees, t_cntry, t_var001))
})
#remove NAs
list_1989 <- lapply(list_1989, function(df) {
df %>%
filter(complete.cases(.))
})
#list to Dataframes
list_1989 <- lapply(list_1989, function(x) {as.data.frame(x)})
#remove countries with less than 300 ppl
list_1989 <- list_1989 %>%
purrr::keep(~nrow(.) >= 300)
#split the dataframe into a list of dataframes based on unique values of t_cntry
list_1994 <- split(df_1994, df_1994$t_var001)
# remove columns with only NA values
list_1994 <- lapply(list_1994, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(t_ees, t_cntry, t_var001))
})
#remove NAs
list_1994 <- lapply(list_1994, function(df) {
df %>%
filter(complete.cases(.))
})
#list to Dataframes
list_1994 <- lapply(list_1994, function(x) {as.data.frame(x)})
#remove countries with less than 300 ppl
list_1994 <- list_1994 %>%
purrr::keep(~nrow(.) >= 300)
#merge germanies and remove east germany
list_1994[["27"]] <- rbind(list_1994[["27"]], list_1994[["28"]])
list_1994[["28"]] <- NULL
#split the dataframe into a list of dataframes based on unique values of t_cntry
list_1999 <- split(df_1999, df_1999$t_var001) #very few cases from the start
# remove columns with only NA values
list_1999 <- lapply(list_1999, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(t_ees, t_cntry, t_var001))
})
#BELGIUM IS A PROBLEM!!
#map(list_1999$BELGIUM, table)
#probably respondents of different languages selected different parties
#try to check with language of interview variable/belgium questionnaire
#remove NAs
list_1999 <- lapply(list_1999, function(df) {
df %>%
filter(complete.cases(.))
})
#list to Dataframes
list_1999 <- lapply(list_1999, function(x) {as.data.frame(x)})
#remove countries with less than 300 ppl
list_1999 <- list_1999 %>%
purrr::keep(~nrow(.) >= 300)
#split the dataframe into a list of dataframes based on unique values of t_cntry
list_2004 <- split(df_2004, df_2004$t_var001)
# remove columns with only NA values
list_2004 <- lapply(list_2004, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(t_ees, t_cntry, t_var001))
})
#again belgium, and also lituania and luxemburg and sweden are problems
#remove NAs
list_2004 <- lapply(list_2004, function(df) {
df %>%
filter(complete.cases(.))
})
#now also britain is a problem
#list to Dataframes
list_2004 <- lapply(list_2004, function(x) {as.data.frame(x)})
#remove countries with less than 300 ppl
list_2004 <- list_2004 %>%
purrr::keep(~nrow(.) >= 300)
#remove countries with zero cols
list_2004 <- list_2004 %>%
keep(~ ncol(.) > 0)
#remove northern ireland
list_2004[["20"]] = NULL
#select ptvs and country, NAs, recode
d_2009 = d_2009 %>%
select(t102, q39_p1:q39_p15) %>%
mutate(across(q39_p1:q39_p15, ~case_when(
. > 10 ~ NA_real_,
TRUE ~ .
)))
#country list
list_2009 = split(d_2009, d_2009$t102)
#remove country and empty col
list_2009 <- lapply(list_2009, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-(t102))
})
#remove NAs
list_2009 <- lapply(list_2009, function(df) {
df %>%
filter(complete.cases(.))
})
#select ptvs and country, NAs, recode
d_2014 = d_2014 %>%
select(countrycode, qpp8_1:qpp8_8) %>%
mutate(across(qpp8_1:qpp8_8, ~case_when(
. <= 0 ~ NA_real_,
TRUE ~ .
)))
#country list
list_2014 = split(d_2014, d_2014$countrycode)
#remove country and empty col
list_2014 <- lapply(list_2014, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-(countrycode))
})
#remove NAs
list_2014 <- lapply(list_2014, function(df) {
df %>%
filter(complete.cases(.))
})
#select ptvs and country, NAs, recode
d_2019 = d_2019 %>%
select(countrycode, q10_1:q10_10) %>%
mutate(across(q10_1:q10_10, ~case_when(
. == 99 ~ NA_real_,
. == 98 ~ NA_real_,
. == 97 ~ NA_real_,
. == 96 ~ NA_real_,
TRUE ~ .
))) %>%
mutate(
across(c(q10_8, q10_9), ~case_when(
. > 0 & . <= 1 ~ 1,
. > 1 & . <= 2 ~ 2,
. > 2 & . <= 3 ~ 3,
. > 3 & . <= 4 ~ 4,
. > 4 & . <= 5 ~ 5,
. > 5 & . <= 6 ~ 6,
. > 6 & . <= 7 ~ 7,
. > 7 & . <= 8 ~ 8,
. > 8 & . <= 9 ~ 9,
. > 9 & . <= 10 ~ 10,
TRUE ~ .  # Keeps original value if none of the conditions are met
))
)
#country list
list_2019 = split(d_2019, d_2019$countrycode)
#remove country and empty col
list_2019 <- lapply(list_2019, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-(countrycode))
})
#remove NAs
list_2019 <- lapply(list_2019, function(df) {
df %>%
filter(complete.cases(.))
})
#Bulgaria is uncorrectly coded with code 1110, i transform it in 1100 as in 2004 and 2019
names(list_2019)[3] <- "1100"
View(d_1989_2004)
View(d_1989_2004)
#conversion rule: labels of this:
#d_1989_2004$t_var001
# Name vector
name_conversion <- c("austria", "belgium", "britain", "cyprus", "czech republic",
"denmark", "estonia", "finland", "france", "germany",
"greece", "hungary", "ireland", "italy", "latvia",
"lithuania", "luxembourg", "malta", "netherlands", "northern ireland",
"poland", "portugal", "slovakia", "slovenia", "spain",
"sweden", "west germany", "east germany")
names(name_conversion) <- 1:28
# define function for conversion
rename_elements <- function(list) {names(list) <- sapply(names(list),
function(x) name_conversion[x])
return(list)}
# Apply the function
list_1989 <- rename_elements(list_1989)
list_1994 <- rename_elements(list_1994)
list_1999 <- rename_elements(list_1999)
list_2004 <- rename_elements(list_2004)
#English to ISO
# Convert English country names in list names to ISO codes
names(list_1989) <- countrycode(names(list_1989), "country.name", "iso3c")
names(list_1994) <- countrycode(names(list_1994), "country.name", "iso3c")
names(list_1999) <- countrycode(names(list_1999), "country.name", "iso3c")
names(list_2004) <- countrycode(names(list_2004), "country.name", "iso3c")
# Create a named vector with numerical codes as names and country names as values
country_codes <- setNames(c("Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Rep.",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden", "United Kingdom"),
c("1040", "1056", "1100", "1191", "1196", "1203", "1208", "1233", "1246",
"1250", "1276", "1300", "1348", "1372", "1380", "1428", "1440", "1442",
"1470", "1528", "1616", "1620", "1642", "1703", "1705", "1724", "1752", "1826"))
# Use the names function to replace numerical names with country names in list_2009
names(list_2009) <- country_codes[names(list_2009)]
names(list_2014) <- country_codes[names(list_2014)]
names(list_2019) <- country_codes[names(list_2019)]
#english names to ISO
names(list_2009) <- countrycode(names(list_2009), "country.name", "iso3c")
names(list_2014) <- countrycode(names(list_2014), "country.name", "iso3c")
names(list_2019) <- countrycode(names(list_2019), "country.name", "iso3c")
View(list_1989)
View(list_1994)
View(list_1999)
View(list_2004)
View(list_2009)
View(list_2014)
View(list_2019)
View(list_1989)
View(list_1989)
View(list_1999)
