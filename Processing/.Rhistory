na.omit()
# Now back again on the trend file with the same procedure as before
#split the dataframe into a list of dataframes based on unique values of t_cntry
list_2004 = split(df_2004, df_2004$t_var001)
# remove columns with only NA values
list_2004 = lapply(list_2004, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(t_ees, t_cntry, t_var001))
})
# remove counrties without PTVs data
list_2004[["2"]] = NULL
list_2004[["16"]] = NULL
list_2004[["17"]] = NULL
#assign data of SWE
list_2004[["26"]] = SWE_2004
#examine pattern of missing
map(list_2004, vis_miss)
#exclude party19 and party20 from britain
list_2004[["3"]][["t_var_ptv_party19"]] = NULL
list_2004[["3"]][["t_var_ptv_party20"]] = NULL
#remove NAs
list_2004 = lapply(list_2004, function(df) {
df %>%
filter(complete.cases(.))
})
#list to Dataframes
list_2004 = lapply(list_2004, function(x) {as.data.frame(x)})
#here there is a V for splitting Belgium: t103
#select ptvs and country, NAs, recode
d_2009 = d_2009 %>%
select(t103, q39_p1:q39_p15) %>%
mutate(across(q39_p1:q39_p15, ~case_when(
. > 10 ~ NA_real_,
TRUE ~ .
)))
#country list
list_2009 = split(d_2009, d_2009$t103)
#remove country and empty col
list_2009 = lapply(list_2009, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-(t103))
})
#examine pattern of missing
map(list_2009, vis_miss)
#remove NAs
list_2009 = lapply(list_2009, function(df) {
df %>%
filter(complete.cases(.))
})
#select ptvs and country, NAs, recode
d_2014 = d_2014 %>%
select(countrycode, p13_intlang, qpp8_1:qpp8_8) %>%
mutate(across(qpp8_1:qpp8_8, ~case_when(
. <= 0 ~ NA_real_,
TRUE ~ .
)))
#country list
list_2014 = split(d_2014, d_2014$countrycode)
#split belgium
b1 = list_2014[["1056"]] %>%
filter(p13_intlang == 4)
b2 = list_2014[["1056"]] %>%
filter(p13_intlang == 8) %>%
select(-qpp8_7) #always missing, error documented in the release note
# Assign belgium
list_2014[["1056"]] = b1
list_2014[["1056_2"]] = b2
#remove country and empty col
list_2014 = lapply(list_2014, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-(countrycode))
})
#examine pattern of missing
map(list_2014, vis_miss)
#remove NAs
list_2014 = lapply(list_2014, function(df) {
df %>%
filter(complete.cases(.))
})
#select ptvs and country, NAs, recode
d_2019 = d_2019 %>%
select(countrycode, meta_lang_be, q10_1:q10_10) %>%
mutate(across(q10_1:q10_10, ~case_when(
. == 99 ~ NA_real_,
. == 98 ~ NA_real_,
. == 97 ~ NA_real_,
. == 96 ~ NA_real_,
TRUE ~ .
))) %>%
mutate(
across(c(q10_8, q10_9), ~case_when(
. > 0 & . <= 1 ~ 1,
. > 1 & . <= 2 ~ 2,
. > 2 & . <= 3 ~ 3,
. > 3 & . <= 4 ~ 4,
. > 4 & . <= 5 ~ 5,
. > 5 & . <= 6 ~ 6,
. > 6 & . <= 7 ~ 7,
. > 7 & . <= 8 ~ 8,
. > 8 & . <= 9 ~ 9,
. > 9 & . <= 10 ~ 10,
TRUE ~ .
))
)
#country list
list_2019 = split(d_2019, d_2019$countrycode)
#split belgium
b1 = list_2019[["1056"]] %>%
filter(meta_lang_be == 1)
b2 = list_2019[["1056"]] %>%
filter(meta_lang_be == 2)
# Assign belgium
list_2019[["1056"]] = b1
list_2019[["1056_2"]] = b2
#remove country and empty col
list_2019 = lapply(list_2019, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(countrycode, meta_lang_be))
})
#examine pattern of missing
map(list_2019, vis_miss)
#remove NAs
list_2019 = lapply(list_2019, function(df) {
df %>%
filter(complete.cases(.))
})
#Bulgaria is uncorrectly coded with code 1110, i transform it in 1100 as in 2004 and 2019
names(list_2019)[3] = "1100"
#conversion rule: labels of this:
#d_1989_2004$t_var001
# Name vector
name_conversion = c("austria", "belgium", "britain", "cyprus", "czech republic",
"denmark", "estonia", "finland", "france", "germany",
"greece", "hungary", "ireland", "italy", "latvia",
"lithuania", "luxembourg", "malta", "netherlands", "northern ireland",
"poland", "portugal", "slovakia", "slovenia", "spain",
"sweden", "west germany", "east germany", "belgium")
names(name_conversion) = 1:29
# define function for conversion
rename_elements = function(list) {names(list) = sapply(names(list),
function(x) name_conversion[x])
return(list)}
# Apply the function
list_1989 = rename_elements(list_1989)
list_1994 = rename_elements(list_1994)
list_1999 = rename_elements(list_1999)
list_2004 = rename_elements(list_2004)
#English to ISO
# Convert English country names in list names to ISO codes
names(list_1989) = countrycode(names(list_1989), "country.name", "iso3c")
names(list_1994) = countrycode(names(list_1994), "country.name", "iso3c")
names(list_1999) = countrycode(names(list_1999), "country.name", "iso3c")
names(list_2004) = countrycode(names(list_2004), "country.name", "iso3c")
# drop northern ireland
list_1989[["NA"]] = NULL
list_1994[["NA"]] = NULL
list_2004[["NA"]] = NULL
country_codes = c("BEL","BEL","CZE","DNK","DEU","EST","GRC","ESP","FRA","IRL","ITA",
"CYP","LVA","LTU","LUX","HUN","MLT","NLD","AUT","POL","PRT","SVN",
"SVK","FIN","SWE","GBR","BGR","ROU")
# Assuming list_2009 is your list and it has the same number of elements as the length of country_codes
names(list_2009) <- country_codes
# Create a named vector with numerical codes as names and country names as values
country_codes = setNames(c("Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Rep.",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden", "United Kingdom", "Belgium"),
c("1040", "1056", "1100", "1191", "1196", "1203", "1208", "1233", "1246",
"1250", "1276", "1300", "1348", "1372", "1380", "1428", "1440", "1442",
"1470", "1528", "1616", "1620", "1642", "1703", "1705", "1724", "1752", "1826", "1056_2"))
#replace numerical names with country names
names(list_2014) = country_codes[names(list_2014)]
names(list_2019) = country_codes[names(list_2019)]
#english names to ISO
names(list_2014) = countrycode(names(list_2014), "country.name", "iso3c")
names(list_2019) = countrycode(names(list_2019), "country.name", "iso3c")
EES = list()
EES[["1989"]] = list_1989
View(EES)
EES[["1994"]] = list_1994
EES[["1999"]] = list_1999
EES[["2004"]] = list_2004
EES[["2009"]] = list_2009
EES[["2014"]] = list_2014
EES[["2019"]] = list_2019
13+13+16+21+28+29
#packages
library("pacman")
p_load(tidyverse, here, sjlabelled, stringr, glue, janitor, haven, stargazer,
ltm, skimr, readxl, naniar, labelled, conflicted, countrycode, visdat)
#remove scientific notation
options(scipen=999)
#conflicts
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
#EES data
#Combined data from 1989 to 2004
d_1989_2004 = read_dta(here("Input", "data", "trendEES.dta")) %>%
clean_names()
#Original data 2009
d_2009 = read_dta(here("Input", "data", "2009.dta")) %>%
clean_names()
##ptvs
#table(d_2009$q39_p1) #first
#table(d_2009$q39_p15) #last
#Original data 2014
d_2014 = read_dta(here("Input", "data", "2014.dta")) %>%
clean_names()
##ptvs
#table(d_2014$qpp8_1) #first
#table(d_2014$qpp8_8) #last
#Original data 2019
d_2019 = read_dta(here("Input", "data", "2019.dta")) %>%
clean_names()
##ptvs
#table(d_2019$q10_1) #first
#table(d_2019$q10_10) #last
#Extra operations on cumulated data 1989-2004
#select country, year, ptvs
d_1989_2004 = d_1989_2004 %>%
select(t_ees, t_cntry, t_var001, t_var_ptv_party1: t_var_ptv_party58)
#Missing cases as NA
d_1989_2004 = d_1989_2004 %>%
mutate(across(t_var_ptv_party1:t_var_ptv_party58, ~case_when(
. == 99 ~ NA_real_,
. == 98 ~ NA_real_,
. == 97 ~ NA_real_,
. == 12 ~ NA_real_,
. == -1 ~ NA_real_,
TRUE ~ .
)))
#wave dfs for d_1989_2004
list_of_dfs = split(d_1989_2004, d_1989_2004$t_ees)
for (year in names(list_of_dfs)) {
var_name = paste("df", year, sep = "_")
assign(var_name, list_of_dfs[[year]], envir = .GlobalEnv)
}
#split the dataframe into a list of dataframes based on unique values of t_cntry
list_1989 = split(df_1989, df_1989$t_var001)
# remove columns with only NA values
list_1989 = lapply(list_1989, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(t_ees, t_cntry, t_var001))
})
#examine pattern of missing
map(list_1989, vis_miss)
#split belgium
list_1989[["29"]] = list_1989[["2"]] %>%
select(c(t_var_ptv_party8, t_var_ptv_party11, t_var_ptv_party15, t_var_ptv_party20, t_var_ptv_party25, t_var_ptv_party32))
list_1989[["2"]] = list_1989[["2"]] %>%
select(-c(t_var_ptv_party8, t_var_ptv_party11, t_var_ptv_party15, t_var_ptv_party20, t_var_ptv_party25, t_var_ptv_party32))
#remove NAs
list_1989 = lapply(list_1989, function(df) {
df %>%
filter(complete.cases(.))
})
#list to Dataframes
list_1989 = lapply(list_1989, function(x) {as.data.frame(x)})
#split the dataframe into a list of dataframes based on unique values of t_cntry
list_1994 = split(df_1994, df_1994$t_var001)
# remove columns with only NA values
list_1994 = lapply(list_1994, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(t_ees, t_cntry, t_var001))
})
#examine pattern of missing
map(list_1994, vis_miss)
#split belgium
list_1994[["29"]] = list_1994[["2"]] %>%
select(c(t_var_ptv_party9, t_var_ptv_party14, t_var_ptv_party19, t_var_ptv_party24, t_var_ptv_party27, t_var_ptv_party28))
list_1994[["2"]] = list_1994[["2"]] %>%
select(-c(t_var_ptv_party9, t_var_ptv_party14, t_var_ptv_party19, t_var_ptv_party24, t_var_ptv_party27, t_var_ptv_party28))
#remove NAs
list_1994 = lapply(list_1994, function(df) {
df %>%
filter(complete.cases(.))
})
#list to Dataframes
list_1994 = lapply(list_1994, function(x) {as.data.frame(x)})
#merge germanies and remove east germany
list_1994[["27"]] = rbind(list_1994[["27"]], list_1994[["28"]])
list_1994[["28"]] = NULL
#split the dataframe into a list of dataframes based on unique values of t_cntry
list_1999 = split(df_1999, df_1999$t_var001)
# remove columns with only NA values
list_1999 = lapply(list_1999, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(t_ees, t_cntry, t_var001))
})
#examine pattern of missing
map(list_1999, vis_miss)
#split belgium
list_1999[["29"]] = list_1999[["2"]] %>%
select(c(t_var_ptv_party9, t_var_ptv_party14, t_var_ptv_party19, t_var_ptv_party24, t_var_ptv_party28, t_var_ptv_party29))
list_1999[["2"]] = list_1999[["2"]] %>%
select(-c(t_var_ptv_party9, t_var_ptv_party14, t_var_ptv_party19, t_var_ptv_party24, t_var_ptv_party28, t_var_ptv_party29))
#remove NAs
list_1999 = lapply(list_1999, function(df) {
df %>%
filter(complete.cases(.))
})
#list to Dataframes
list_1999 = lapply(list_1999, function(x) {as.data.frame(x)})
#here the trend file is wrong. We have ptvs for sweden in the 2004.dta file
SWE_2004 = read_dta(here("Input", "data", "2004.dta")) %>%
clean_names() %>%
filter(country == 26) %>%
select(v115: v128) %>%
mutate(across(v115:v128, ~na_if(.x, 99)))
# remove columns with only NA values, than NA.omit
SWE_2004 = SWE_2004 %>%
select(where(~ !all(is.na(.)))) %>%
na.omit()
# Now back again on the trend file with the same procedure as before
#split the dataframe into a list of dataframes based on unique values of t_cntry
list_2004 = split(df_2004, df_2004$t_var001)
# remove columns with only NA values
list_2004 = lapply(list_2004, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(t_ees, t_cntry, t_var001))
})
# remove counrties without PTVs data
list_2004[["2"]] = NULL
list_2004[["16"]] = NULL
list_2004[["17"]] = NULL
#assign data of SWE
list_2004[["26"]] = SWE_2004
#examine pattern of missing
map(list_2004, vis_miss)
#exclude party19 and party20 from britain
list_2004[["3"]][["t_var_ptv_party19"]] = NULL
list_2004[["3"]][["t_var_ptv_party20"]] = NULL
#remove NAs
list_2004 = lapply(list_2004, function(df) {
df %>%
filter(complete.cases(.))
})
#list to Dataframes
list_2004 = lapply(list_2004, function(x) {as.data.frame(x)})
#here there is a V for splitting Belgium: t103
#select ptvs and country, NAs, recode
d_2009 = d_2009 %>%
select(t103, q39_p1:q39_p15) %>%
mutate(across(q39_p1:q39_p15, ~case_when(
. > 10 ~ NA_real_,
TRUE ~ .
)))
#country list
list_2009 = split(d_2009, d_2009$t103)
#remove country and empty col
list_2009 = lapply(list_2009, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-(t103))
})
#examine pattern of missing
map(list_2009, vis_miss)
#remove NAs
list_2009 = lapply(list_2009, function(df) {
df %>%
filter(complete.cases(.))
})
#select ptvs and country, NAs, recode
d_2014 = d_2014 %>%
select(countrycode, p13_intlang, qpp8_1:qpp8_8) %>%
mutate(across(qpp8_1:qpp8_8, ~case_when(
. <= 0 ~ NA_real_,
TRUE ~ .
)))
#country list
list_2014 = split(d_2014, d_2014$countrycode)
#split belgium
b1 = list_2014[["1056"]] %>%
filter(p13_intlang == 4)
b2 = list_2014[["1056"]] %>%
filter(p13_intlang == 8) %>%
select(-qpp8_7) #always missing, error documented in the release note
# Assign belgium
list_2014[["1056"]] = b1
list_2014[["1056_2"]] = b2
#remove country and empty col
list_2014 = lapply(list_2014, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-(countrycode))
})
#examine pattern of missing
map(list_2014, vis_miss)
#remove NAs
list_2014 = lapply(list_2014, function(df) {
df %>%
filter(complete.cases(.))
})
#select ptvs and country, NAs, recode
d_2019 = d_2019 %>%
select(countrycode, meta_lang_be, q10_1:q10_10) %>%
mutate(across(q10_1:q10_10, ~case_when(
. == 99 ~ NA_real_,
. == 98 ~ NA_real_,
. == 97 ~ NA_real_,
. == 96 ~ NA_real_,
TRUE ~ .
))) %>%
mutate(
across(c(q10_8, q10_9), ~case_when(
. > 0 & . <= 1 ~ 1,
. > 1 & . <= 2 ~ 2,
. > 2 & . <= 3 ~ 3,
. > 3 & . <= 4 ~ 4,
. > 4 & . <= 5 ~ 5,
. > 5 & . <= 6 ~ 6,
. > 6 & . <= 7 ~ 7,
. > 7 & . <= 8 ~ 8,
. > 8 & . <= 9 ~ 9,
. > 9 & . <= 10 ~ 10,
TRUE ~ .
))
)
#country list
list_2019 = split(d_2019, d_2019$countrycode)
#split belgium
b1 = list_2019[["1056"]] %>%
filter(meta_lang_be == 1)
b2 = list_2019[["1056"]] %>%
filter(meta_lang_be == 2)
# Assign belgium
list_2019[["1056"]] = b1
list_2019[["1056_2"]] = b2
#remove country and empty col
list_2019 = lapply(list_2019, function(df) {
df %>%
select(where(~ !all(is.na(.))),
-c(countrycode, meta_lang_be))
})
#examine pattern of missing
map(list_2019, vis_miss)
#remove NAs
list_2019 = lapply(list_2019, function(df) {
df %>%
filter(complete.cases(.))
})
#Bulgaria is uncorrectly coded with code 1110, i transform it in 1100 as in 2004 and 2019
names(list_2019)[3] = "1100"
#conversion rule: labels of this:
#d_1989_2004$t_var001
# Name vector
name_conversion = c("austria", "belgium", "britain", "cyprus", "czech republic",
"denmark", "estonia", "finland", "france", "germany",
"greece", "hungary", "ireland", "italy", "latvia",
"lithuania", "luxembourg", "malta", "netherlands", "northern ireland",
"poland", "portugal", "slovakia", "slovenia", "spain",
"sweden", "west germany", "east germany", "belgium")
names(name_conversion) = 1:29
# define function for conversion
rename_elements = function(list) {names(list) = sapply(names(list),
function(x) name_conversion[x])
return(list)}
# Apply the function
list_1989 = rename_elements(list_1989)
list_1994 = rename_elements(list_1994)
list_1999 = rename_elements(list_1999)
list_2004 = rename_elements(list_2004)
#English to ISO
# Convert English country names in list names to ISO codes
names(list_1989) = countrycode(names(list_1989), "country.name", "iso3c")
names(list_1994) = countrycode(names(list_1994), "country.name", "iso3c")
names(list_1999) = countrycode(names(list_1999), "country.name", "iso3c")
names(list_2004) = countrycode(names(list_2004), "country.name", "iso3c")
# drop northern ireland
list_1989[["NA"]] = NULL
list_1994[["NA"]] = NULL
list_2004[["NA"]] = NULL
#conversion rule from: d_2009$t103
country_codes = c("BEL","BEL","CZE","DNK","DEU","EST","GRC","ESP","FRA","IRL","ITA",
"CYP","LVA","LTU","LUX","HUN","MLT","NLD","AUT","POL","PRT","SVN",
"SVK","FIN","SWE","GBR","BGR","ROU")
# Assuming list_2009 is your list and it has the same number of elements as the length of country_codes
names(list_2009) <- country_codes
# Create a named vector with numerical codes as names and country names as values
country_codes = setNames(c("Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Rep.",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden", "United Kingdom", "Belgium"),
c("1040", "1056", "1100", "1191", "1196", "1203", "1208", "1233", "1246",
"1250", "1276", "1300", "1348", "1372", "1380", "1428", "1440", "1442",
"1470", "1528", "1616", "1620", "1642", "1703", "1705", "1724", "1752", "1826", "1056_2"))
#replace numerical names with country names
names(list_2014) = country_codes[names(list_2014)]
names(list_2019) = country_codes[names(list_2019)]
#english names to ISO
names(list_2014) = countrycode(names(list_2014), "country.name", "iso3c")
names(list_2019) = countrycode(names(list_2019), "country.name", "iso3c")
EES = list()
EES[["1989"]] = list_1989
EES[["1994"]] = list_1994
EES[["1999"]] = list_1999
EES[["2004"]] = list_2004
EES[["2009"]] = list_2009
EES[["2014"]] = list_2014
EES[["2019"]] = list_2019
#save merged file
saveRDS(EES, here("Input", "data", "EES.rds"))
